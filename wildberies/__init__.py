import math  # импорт встроенныех либ в пайтон
import io

from django.db import models  # импорт из фреймворков и скачанных библиотект

from .settings import *  # ваши кастомные объекты, классы
"""
создайте джанго приложение под названием `orders`
создайте джанго приложение под названием `users`

Реализуйте модельку для пользователя.  (AbstractUser или AbstractBaseUser или через one-to-one)
Создайте модель Order, в котором вы фиксируете кто и какой товар купил, и когда.

Создайте следующие эндпоинты:
1. /api/v1/users/<user_id>/orders/ - здесь вы получаете заказы определенного пользователя.
пример респонса:
[{'id': <айдишка заказа>, 'product': {'name': 'название товара', 'order_price': 777}, 'ordered_date': <дата и время заказа>},
]

2. /api/v1/users/<user_id>/orders/<order_id>/ - здесь вы получаете конкретный заказ определенного пользователя.
пример респонса:
{'id': <айдишка заказа>, 'product': {'name': 'название товара', 'order_price': 777}, 'ordered_date': <дата и время заказа>}

Третье Задание для тех кто посмотрел крайнюю видеозапись 27 апреля, по ТОКЕНАМ.
3. /api/v1/users/my-orders/ - клиент получает СВОИ заказы
пример респонса:
[{'id': <айдишка заказа>, 'product': {'name': 'название товара', 'order_price': 777}, 'ordered_date': <дата и время заказа>},
]

*Дополнительные требования к проекту:
 - тесты для api (тестируете логику)
 - тесты для сериализаторов
 - отсутствие "мусора" в проекте (файлы и директории, которые должны быть в гитигноре; комменты в коде;)
 - наличие requirements.txt
 - наличие и оформление README.md
 - наличие гитигнора
 - наличие у пользователей логина (или имейл или номер телефона) и пароля
"""
"""
JWT - JSON Web Token

{
    "user_id": 1,
    "expiration_date": "2022:12:26T14:55:21"
}
 -> шифрование -> "fa;wejqfpwhfpaj;lkdsf;lajs;djf;las;ajsldjf;d;lva;snd;lva;lsndvasd"
 

"fa;wejqfpwhfpaj;lkdsf;lajs;djf;las;ajsldjf;d;lva;snd;lva;lsndvasd" -> дешифруем ->
{
    "user_id": 1,
    "expiration_date": "2022:12:26T14:55:21"
}
"""

"""
Сущности:
 - Задача 
 (название, 
 комментарий, 
 дата и время дедлайна, 
 дата и время создания задачи, файл, статус задачи)


Энпоинты:
 - /api/v1/todo/  - [GET] все задачи
 - /api/v1/todo/ - [POST] создаём задачу
 - /api/v1/todo/<pk>/ - [PATCH] выполнить задачу (*поменять статус на выполнено)
 ...
"""